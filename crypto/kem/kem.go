package kem

import (
	"errors"
	"io"

	"github.com/karalef/quark/crypto"
	"github.com/karalef/quark/crypto/internal"
)

// Generate derives a key-pair from a seed generated by provided rand.
//
// If rand is nil, crypto/rand is used.
func Generate(s Scheme, rand io.Reader) (PrivateKey, PublicKey, error) {
	seed, err := crypto.RandRead(rand, s.SeedSize())
	if err != nil {
		return nil, nil, err
	}
	return s.DeriveKey(seed)
}

// Scheme represents a KEM scheme.
type Scheme interface {
	Name() string

	// DeriveKey derives a key-pair from a seed.
	DeriveKey(seed []byte) (PrivateKey, PublicKey, error)

	// Unpacks a PublicKey from the provided bytes.
	UnpackPublic(key []byte) (PublicKey, error)

	// Unpacks a PrivateKey from the provided bytes.
	UnpackPrivate(key []byte) (PrivateKey, error)

	// Size of packed public keys.
	PublicKeySize() int

	// Size of packed private keys.
	PrivateKeySize() int

	// Size of encapsulated shared secret.
	CiphertextSize() int

	// Size of shared secret.
	SharedSecretSize() int

	// Size of encapsulation seed.
	EncapsulationSeedSize() int

	// Size of seed.
	SeedSize() int
}

// PrivateKey represents a KEM private key.
type PrivateKey interface {
	Scheme() Scheme

	Equal(PrivateKey) bool

	// Bytes allocates a new slice of bytes with Scheme().PrivateKeySize() length
	// and writes the private key to it.
	Bytes() []byte

	// Decapsulate decapsulates the shared secret from the provided ciphertext.
	Decapsulate(ciphertext []byte) ([]byte, error)
}

// PublicKey represents a KEM public key.
type PublicKey interface {
	Scheme() Scheme

	Equal(PublicKey) bool

	// Bytes allocates a new slice of bytes with Scheme().PublicKeySize() length
	// and writes the public key to it.
	Bytes() []byte

	// Encapsulate encapsulates a shared secret generated from provided seed.
	Encapsulate(seed []byte) (ciphertext, secret []byte, err error)
}

// errors.
var (
	ErrKeySize           = errors.New("invalid key size")
	ErrSeedSize          = errors.New("invalid seed size")
	ErrCiphertext        = errors.New("invalid ciphertext size")
	ErrEncapsulationSeed = errors.New("invalid encapsulation seed size")
)

var schemes = make(internal.Schemes[Scheme])

func init() {
	Register(Kyber512)
	Register(Kyber768)
	Register(Kyber1024)
	Register(Frodo640Shake)
}

// Register registers a KEM scheme.
func Register(scheme Scheme) { schemes.Register(scheme) }

// ByName returns the KEM scheme by the provided name.
// Returns nil if the name is not registered.
func ByName(name string) Scheme { return schemes.ByName(name) }
