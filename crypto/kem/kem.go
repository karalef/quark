package kem

import (
	"errors"
	"io"

	"github.com/karalef/quark/crypto"
	"github.com/karalef/quark/scheme"
)

// Generate derives a key-pair from a seed generated by provided rand.
//
// If rand is nil, crypto/rand is used.
func Generate(s Scheme, rand io.Reader) (PrivateKey, PublicKey, error) {
	seed, err := crypto.RandRead(rand, s.SeedSize())
	if err != nil {
		return nil, nil, err
	}
	return s.DeriveKey(seed)
}

// Encapsulate is wrapper for PublicKey.Encapsulate with random seed.
func Encapsulate(p PublicKey) (ciphertext []byte, secret []byte, err error) {
	return p.Encapsulate(crypto.Rand(p.Scheme().(Scheme).EncapsulationSeedSize()))
}

// Scheme represents a KEM scheme.
type Scheme interface {
	crypto.Scheme

	// DeriveKey derives a key-pair from a seed.
	DeriveKey(seed []byte) (PrivateKey, PublicKey, error)

	// Unpacks a PublicKey from the provided bytes.
	UnpackPublic(key []byte) (PublicKey, error)

	// Unpacks a PrivateKey from the provided bytes.
	UnpackPrivate(key []byte) (PrivateKey, error)

	// Size of encapsulated shared secret.
	CiphertextSize() int

	// Size of shared secret.
	SharedSecretSize() int

	// Size of encapsulation seed.
	EncapsulationSeedSize() int
}

// PrivateKey represents a KEM private key.
type PrivateKey interface {
	// The scheme returned by Scheme() must implement the Scheme interface.
	crypto.Key
	Public() PublicKey
	Equal(PrivateKey) bool

	// Decapsulate decapsulates the shared secret from the provided ciphertext.
	Decapsulate(ciphertext []byte) ([]byte, error)
}

// PublicKey represents a KEM public key.
type PublicKey interface {
	// The scheme returned by Scheme() must implement the Scheme interface.
	crypto.Key
	CorrespondsTo(PrivateKey) bool
	Equal(PublicKey) bool

	// Encapsulate encapsulates a shared secret generated from provided seed.
	Encapsulate(seed []byte) (ciphertext, secret []byte, err error)
}

// UnpackPublic unpacks a public key from the provided scheme name and key material.
func UnpackPublic(schemeName string, key []byte) (PublicKey, error) {
	scheme, err := ByName(schemeName)
	if err != nil {
		return nil, err
	}
	return scheme.UnpackPublic(key)
}

// UnpackPrivate unpacks a private key from the provided scheme name and key material.
func UnpackPrivate(schemeName string, key []byte) (PrivateKey, error) {
	scheme, err := ByName(schemeName)
	if err != nil {
		return nil, err
	}
	return scheme.UnpackPrivate(key)
}

// errors.
var (
	ErrKeySize           = errors.New("invalid key size")
	ErrSeedSize          = errors.New("invalid seed size")
	ErrCiphertext        = errors.New("invalid ciphertext size")
	ErrEncapsulationSeed = errors.New("invalid encapsulation seed size")
)

var schemes = make(scheme.Map[Scheme])

// Register registers a KEM scheme.
func Register(scheme Scheme) { schemes.Register(scheme) }

// ByName returns the KEM scheme by the provided name.
func ByName(name string) (Scheme, error) { return schemes.ByName(name) }

// ListNames returns all registered KEM algorithms.
func ListNames() []string { return schemes.ListNames() }

// List returns all registered KEM schemes.
func List() []Scheme { return schemes.List() }

// Registry implements scheme.ByName.
type Registry struct{}

var _ scheme.ByName[Scheme] = Registry{}

func (Registry) ByName(name string) (Scheme, error) { return ByName(name) }
