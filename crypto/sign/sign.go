package sign

import (
	"errors"
	"io"

	"github.com/karalef/quark/crypto"
	"github.com/karalef/quark/scheme"
)

// Generate derives a key-pair from a seed generated by provided rand.
//
// If rand is nil, crypto/rand is used.
func Generate(s Scheme, rand io.Reader) (PrivateKey, PublicKey, error) {
	seed, err := crypto.RandRead(rand, s.SeedSize())
	if err != nil {
		return nil, nil, err
	}
	return s.DeriveKey(seed)
}

// Scheme represents signature scheme.
type Scheme interface {
	crypto.Scheme

	// DeriveKey derives a key-pair from a seed.
	DeriveKey(seed []byte) (PrivateKey, PublicKey, error)

	// Unpacks a PublicKey from the provided bytes.
	UnpackPublic(key []byte) (PublicKey, error)

	// Unpacks a PrivateKey from the provided bytes.
	UnpackPrivate(key []byte) (PrivateKey, error)

	// Size of signatures.
	SignatureSize() int
}

// PrivateKey represents a signing private key.
type PrivateKey interface {
	// The scheme returned by Scheme() must implement the Scheme interface.
	crypto.Key
	Public() PublicKey
	Equal(PrivateKey) bool
	Sign() Signer
}

// PublicKey represents a signing public key.
type PublicKey interface {
	// The scheme returned by Scheme() must implement the Scheme interface.
	crypto.Key
	Equal(PublicKey) bool
	Verify() Verifier
}

// CorrespondsTo returns true if public key corresponds to the given private key.
func CorrespondsTo(pk PublicKey, sk PrivateKey) bool {
	if pk == nil || sk == nil {
		return false
	}
	return pk.Equal(sk.Public())
}

// Signer represents a signature state.
type Signer interface {
	io.Writer

	// Reset resets the Signer.
	Reset()

	// Sign signs the written message and returns the signature.
	Sign() []byte
}

// Verifier represents a signature verification state.
type Verifier interface {
	io.Writer

	// Reset resets the Verifier.
	Reset()

	// Verify checks whether the given signature is a valid signature set by
	// the private key corresponding to the specified public key on the
	// written message.
	// Returns an error if the signature does not match the scheme.
	Verify(signature []byte) (bool, error)
}

// UnpackPublic unpacks a public key from the provided scheme name and key material.
func UnpackPublic(schemeName string, key []byte) (PublicKey, error) {
	scheme, err := ByName(schemeName)
	if err != nil {
		return nil, err
	}
	return scheme.UnpackPublic(key)
}

// UnpackPrivate unpacks a private key from the provided scheme name and key material.
func UnpackPrivate(schemeName string, key []byte) (PrivateKey, error) {
	scheme, err := ByName(schemeName)
	if err != nil {
		return nil, err
	}
	return scheme.UnpackPrivate(key)
}

// errors.
var (
	ErrSignature = errors.New("invalid signature")
	ErrSeedSize  = errors.New("invalid seed size")
	ErrKeySize   = errors.New("invalid key size")
)

var schemes = make(scheme.Map[Scheme])

// Register registers a signature scheme.
func Register(scheme Scheme) { schemes.Register(scheme) }

// ByName returns the signature scheme by the provided name.
func ByName(name string) (Scheme, error) { return schemes.ByName(name) }

// ListNames returns all registered signature algorithms.
func ListNames() []string { return schemes.ListNames() }

// List returns all registered signature schemes.
func List() []Scheme { return schemes.List() }

// Registry implements scheme.ByName.
type Registry struct{}

var _ scheme.ByName[Scheme] = Registry{}

func (Registry) ByName(name string) (Scheme, error) { return ByName(name) }
