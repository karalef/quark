package sign

import (
	"errors"
	"io"

	"github.com/karalef/quark/crypto"
)

// Generate derives a key-pair from a seed generated by provided rand.
//
// If rand is nil, crypto/rand is used.
func Generate(s Scheme, rand io.Reader) (PrivateKey, PublicKey, error) {
	seed, err := crypto.RandRead(rand, s.SeedSize())
	if err != nil {
		return nil, nil, err
	}
	return s.DeriveKey(seed)
}

// Scheme represents signature scheme.
type Scheme interface {
	// DeriveKey derives a key-pair from a seed.
	DeriveKey(seed []byte) (PrivateKey, PublicKey, error)

	// Unpacks a PublicKey from the provided bytes.
	UnpackPublic(key []byte) (PublicKey, error)

	// Unpacks a PrivateKey from the provided bytes.
	UnpackPrivate(key []byte) (PrivateKey, error)

	// Size of packed public keys.
	PublicKeySize() int

	// Size of packed private keys.
	PrivateKeySize() int

	// Size of signatures.
	SignatureSize() int

	// Size of seed.
	SeedSize() int
}

// PrivateKey represents a signing private key.
type PrivateKey interface {
	Scheme() Scheme

	Equal(PrivateKey) bool

	// Bytes allocates a new slice of bytes with Scheme().PrivateKeySize() length
	// and writes the private key to it.
	Bytes() []byte

	Sign(msg []byte) ([]byte, error)
}

// PublicKey represents a signing public key.
type PublicKey interface {
	Scheme() Scheme

	Equal(PublicKey) bool

	// Bytes allocates a new slice of bytes with Scheme().PublicKeySize() length
	// and writes the public key to it.
	Bytes() []byte

	Verify(msg []byte, signature []byte) (bool, error)
}

// errors.
var (
	ErrSignature = errors.New("invalid signature")
	ErrSeedSize  = errors.New("invalid seed size")
	ErrKeySize   = errors.New("invalid key size")
)
